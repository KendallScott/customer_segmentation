-----Start ROCK code-----
DEFINE start_day_idnt = '2017302';
DEFINE end_day_idnt = '2017336';
DEFINE start_wk_idnt = '201744';
DEFINE end_wk_idnt = '201748';
DEFINE end_dt = '30dec2017';
DEFINE mth = 'DEC';

--rolling12 
create table rolling12trans_&mth as
select
(case when stre.indiv_id= ecom.indiv_id then stre.indiv_id else coalesce(stre.indiv_id, ecom.indiv_id) end)                                     as indiv_id,
sum((coalesce(stre.rolling12store_sales,0))+ (coalesce(ecom.rolling12ecom_sales, 0)))                                                           as total_sales,
sum((coalesce(stre.rolling12store_trans,0))+ (coalesce(ecom.rolling12ecom_trans, 0)))                                                           as total_trans,
sum((coalesce(stre.rolling12store_units,0))+ (coalesce(ecom.rolling12ecom_units, 0)))                                                           as total_units,
sum(stre.rolling12store_gm)                                                                                                                     as gm_store,
sum(stre.rolling12store_sales)                                                                                                                  as sales_store,
(case when stre.indiv_id= ecom.indiv_id then 'omni' when stre.indiv_id >0 then 'store only' when ecom.indiv_id >0 then 'ecom only' end)         as channel
from (select
          dtl.indiv_id,
          count(distinct dtl.pos_trans_key)                       as rolling12store_trans,
          sum(dtl.extended_sls_amt)                               as rolling12store_sales,
          sum(dtl.grs_mrgn_amt)                                   as rolling12store_gm,
          sum(dtl.qty)                                            as rolling12store_units
         from         ua_pos_trans_dtl dtl
         inner join ua_store str on dtl.loc_key = str.loc_key
         where dtl.wk_idnt between ( &end_wk_idnt - 100 + 1) and &end_wk_idnt and dtl.trans_typ_key in(19,22,33) and str.distt_idnt != '999'
        group by dtl.indiv_id) stre
    full outer join(
    select
        ecom.indiv_id,
        count(distinct ecom.order_id)                           as rolling12ecom_trans,
        sum(ecom.flfll_net_ttl_amt)                             as rolling12ecom_sales,
        sum(ecom.flfll_unit_cnt)                                as rolling12ecom_units
        from ua_ecom_order_dtl   ecom
        inner join ua_pos_tm_day tm on to_date(ecom.flfll_first_dt) = (tm.day_dt)
        where tm.day_idnt between  (&end_day_idnt - 1000 + 1) and &end_day_idnt
        group by ecom.indiv_id) ecom on stre.indiv_id = ecom.indiv_id
group by stre.indiv_id, ecom.indiv_id;

--month sales TY
create table monthshoppers_&mth as
select 
(case when stre.indiv_id= ecom.indiv_id then stre.indiv_id 
  else coalesce(stre.indiv_id, ecom.indiv_id) end)                                                                                      as indiv_id,
sum((coalesce(stre.monthstore_sales,0))+ (coalesce(ecom.monthecom_sales, 0)))                                                           as month_sales,
sum((coalesce(stre.monthstore_trans,0))+ (coalesce(ecom.monthecom_trans, 0)))                                                           as month_trans,
monthstore_gm                                                                                                                           as month_store_gm,
monthstore_sales                                                                                                                        as month_store_sales                                                                                  
from (select
          dtl.indiv_id,
          count(distinct dtl.pos_trans_key)                   as monthstore_trans,
          sum(dtl.extended_sls_amt)                           as monthstore_sales,
          sum(dtl.grs_mrgn_amt)                               as monthstore_gm,
          sum(dtl.qty)                                        as monthstoreunits
         from         ua_pos_trans_dtl dtl
         inner join ua_store str on dtl.loc_key = str.loc_key
         where dtl.wk_idnt between &start_wk_idnt and &end_wk_idnt and dtl.trans_typ_key in(19,22,33) and str.distt_idnt != '999'
        group by dtl.indiv_id) stre
    full outer join(
    select
        ecom.indiv_id,
        count(distinct ecom.order_id)                       as monthecom_trans,
        sum(ecom.flfll_net_ttl_amt)                         as monthecom_sales,
        sum(ecom.flfll_unit_cnt)                            as monthecom_units
        from ua_ecom_order_dtl   ecom
        inner join ua_pos_tm_day tm on to_date(ecom.flfll_first_dt) = (tm.day_dt)
        where tm.day_idnt between  &start_wk_idnt and &end_wk_idnt
        group by ecom.indiv_id) ecom on stre.indiv_id = ecom.indiv_id
group by stre.indiv_id, ecom.indiv_id;

--last and first shop 
create table last_shop_excl_&mth as
select
(case when stre.indiv_id= ecom.indiv_id then stre.indiv_id else coalesce(stre.indiv_id, ecom.indiv_id) end)                                     as indiv_id,
(case when stre.lastshop_store > ecom.lastshop_ecom then stre.lastshop_store when stre.lastshop_store < ecom.lastshop_ecom then ecom.lastshop_ecom end)                       as lastshop,
(case when stre.firstshop_store < ecom.firstshop_ecom then stre.firstshop_store when stre.firstshop_store > ecom.firstshop_ecom then ecom.firstshop_ecom end)                 as firstshop
from (select
          dtl.indiv_id,
          max(dtl.day_idnt)                                       as lastshop_store,
          min(dtl.day_idnt)                                       as firstshop_store
         from         ua_pos_trans_dtl dtl
         inner join ua_store str on dtl.loc_key = str.loc_key
         where dtl.wk_idnt < &start_wk_idnt          and dtl.trans_typ_key in(19,22,33)           and str.distt_idnt != '999'
        group by dtl.indiv_id) stre
    full outer join(
      select
        ecom.indiv_id,
        max(tm.day_idnt)                                          as lastshop_ecom,
        min(tm.day_idnt)                                          as firstshop_ecom
        from ua_ecom_order_dtl   ecom
        inner join ua_pos_tm_day tm on to_date(ecom.flfll_first_dt) = (tm.day_dt)
        where tm.wk_idnt < &start_wk_idnt 
        group by ecom.indiv_id) ecom on stre.indiv_id = ecom.indiv_id
group by stre.indiv_id, ecom.indiv_id;

--new and reactivated customers
create table new_cust_&mth as
select
distinct (indiv_id),
case when indiv_id not in (select distinct indiv_id from last_shop_excl_&mth) then 'new'
when indiv_id in (select distinct indiv_id from last_shop_excl_&mth where lastshop <= (&end_day_idnt - 1000)) then 'react' end as new_react
from monthshoppers_&mth;
 
create table react_cust_&mth as
    select distinct indiv_id
    from rolling12trans_&mth
    where indiv_id in
    (select distinct indiv_id from last_shop_excl_mth_&mth where last_shop <= (&end_day_idnt - 1000));

 create table new_react_cust_&mth as
    select distinct indiv_id
    from new_cust_&mth
    union
    select distinct indiv_id
    from react_cust_&mth;

--define customer groups
create table cust_groups_&mth as
    select
       case when b.indiv_id is not null then 'new'
            when a.rolling12trans >= 6  then 'top'
            when a.rolling12trans >= 3  then 'middle'
            when a.rolling12trans >= 1  then 'bottom'
                                        else 'z.error'
       end                                                as custgroup,
       b.new_react                                        as new_react_split
      ,a.indiv_id
      ,a.lastshop
      ,a.rolling12sales
    from        rolling12trans_&mth a
      left join new_react_cust&mth b on a.indiv_id = b.indiv_id;

--use this definitions and then rerun all of the code above
  -----Start ROCK code-----
DEFINE start_day_idnt = '2016302';
DEFINE end_day_idnt = '2016336';
DEFINE start_wk_idnt = '201644';
DEFINE end_wk_idnt = '201648';
DEFINE end_dt = '28dec2016';
DEFINE mth = '_LY_DEC';
